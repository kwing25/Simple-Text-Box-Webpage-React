{"ast":null,"code":"var _jsxFileName = \"/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx\";\n// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n// }\n// import React, { useState, useEffect } from \"react\";\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n// export default TextBox;\n// import React from 'react';\n// import Moment from 'react-moment';\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\n// import React from 'react';\n// import Moment from 'react-moment';\n// import moment from 'moment'\n// export default class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n//     render() {\n//         const currentDateTime = moment()\n//         const { days, hours, minutes, seconds } = this.state;\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n//                 {/* <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n//                 <div>\n//                     <h1>Countdown</h1>\n//                     <div className=\"countdown-wrapper\">\n//                         <div className=\"countdown-item\">\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     </div>\n//                 </div> */}\n//                 <div>\n//                     Dhaka: <Moment unix tz=\"Asia/Dhaka\">\n//                         {currentDateTime}\n//                     </Moment><br />\n//       Los Angeles: <Moment unix tz=\"America/Los_Angeles\">\n//                         {currentDateTime}\n//                     </Moment>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\nimport React from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Countdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      days: undefined,\n      hours: undefined,\n      minutes: undefined,\n      seconds: undefined\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const {\n        timeTillDate,\n        timeFormat\n      } = this.props;\n      const then = moment(timeTillDate, timeFormat);\n      const now = moment();\n      const countdown = moment(then - now);\n      const days = countdown.format('D');\n      const hours = countdown.format('HH');\n      const minutes = countdown.format('mm');\n      const seconds = countdown.format('ss');\n      this.setState({\n        days,\n        hours,\n        minutes,\n        seconds\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = this.state; // Mapping the date values to radius values\n\n    const daysRadius = mapNumber(days, 30, 0, 0, 360);\n    const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n    const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n    const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n    if (!seconds) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Countdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-wrapper\",\n        children: [days && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: daysRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), days, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this), hours && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: hoursRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 29\n          }, this), hours, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 25\n        }, this), minutes && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: minutesRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }, this), minutes, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this), seconds && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: secondsRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this), seconds, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"seconds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst SVGCircle = ({\n  radius\n}) => /*#__PURE__*/_jsxDEV(\"svg\", {\n  className: \"countdown-svg\",\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    fill: \"none\",\n    stroke: \"#333\",\n    \"stroke-width\": \"4\",\n    d: describeArc(50, 50, 48, 0, radius)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 304,\n  columnNumber: 5\n}, this); // From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n\n\n_c = SVGCircle;\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n  var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n  var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ');\n  return d;\n} // From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n\n\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n  return (number - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SVGCircle\");","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx"],"names":["React","moment","Countdown","Component","state","days","undefined","hours","minutes","seconds","componentDidMount","interval","setInterval","timeTillDate","timeFormat","props","then","now","countdown","format","setState","componentWillUnmount","clearInterval","render","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","SVGCircle","radius","describeArc","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","d","join","number","in_min","in_max","out_min","out_max"],"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","sourcesContent":["// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n\n\n// }\n\n// import React, { useState, useEffect } from \"react\";\n\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n\n\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default TextBox;\n\n// import React from 'react';\n// import Moment from 'react-moment';\n\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\n// import React from 'react';\n// import Moment from 'react-moment';\n// import moment from 'moment'\n\n// export default class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n//     render() {\n//         const currentDateTime = moment()\n\n//         const { days, hours, minutes, seconds } = this.state;\n\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n\n//                 {/* <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n\n\n//                 <div>\n//                     <h1>Countdown</h1>\n//                     <div className=\"countdown-wrapper\">\n//                         <div className=\"countdown-item\">\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     </div>\n//                 </div> */}\n\n\n//                 <div>\n//                     Dhaka: <Moment unix tz=\"Asia/Dhaka\">\n//                         {currentDateTime}\n//                     </Moment><br />\n//       Los Angeles: <Moment unix tz=\"America/Los_Angeles\">\n//                         {currentDateTime}\n//                     </Moment>\n//                 </div>\n\n//             </div>\n\n\n\n//         );\n//     }\n// }\n\n\nimport React from 'react';\nimport moment from 'moment';\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const {\n                timeTillDate,\n                timeFormat\n            } = this.props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n            this.setState({\n                days,\n                hours,\n                minutes,\n                seconds\n            });\n        }, 1000);\n    }\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n    render() {\n        const {\n            days,\n            hours,\n            minutes,\n            seconds\n        } = this.state;\n        // Mapping the date values to radius values\n        const daysRadius = mapNumber(days, 30, 0, 0, 360);\n        const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n        const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n        const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n        if (!seconds) {\n            return null;\n        }\n        return (\n            <div>\n                <h1>Countdown</h1>\n                <div className=\"countdown-wrapper\">\n                    {days && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={daysRadius} />\n                            {days}\n                            <span>days</span>\n                        </div>\n                    )}\n                    {hours && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={hoursRadius} />\n                            {hours}\n                            <span>hours</span>\n                        </div>\n                    )}\n                    {minutes && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={minutesRadius} />\n                            {minutes}\n                            <span>minutes</span>\n                        </div>\n                    )}\n                    {seconds && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={secondsRadius} />\n                            {seconds}\n                            <span>seconds</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nconst SVGCircle = ({\n    radius\n}) => (\n    <svg className=\"countdown-svg\">\n        <path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        />\n    </svg>\n);\n// From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n    return d;\n}\n// From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}\n"]},"metadata":{},"sourceType":"module"}