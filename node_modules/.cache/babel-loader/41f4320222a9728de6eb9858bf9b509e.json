{"ast":null,"code":"var _jsxFileName = \"/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx\";\n// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n// }\n// import React, { useState, useEffect } from \"react\";\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n// export default TextBox;\n// import React from 'react';\n// import Moment from 'react-moment';\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\nimport React from 'react';\nimport Moment from 'react-moment';\nimport moment from 'moment'; // export default class TextBox extends React.Component {\n//     render() {\n//         const currentDateTime = moment()\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n//                 <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Countdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      days: undefined,\n      hours: undefined,\n      minutes: undefined,\n      seconds: undefined\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const {\n        timeTillDate,\n        timeFormat\n      } = this.props;\n      const then = moment(timeTillDate, timeFormat);\n      const now = moment();\n      const countdown = moment(then - now);\n      const days = countdown.format('D');\n      const hours = countdown.format('HH');\n      const minutes = countdown.format('mm');\n      const seconds = countdown.format('ss');\n      this.setState({\n        days,\n        hours,\n        minutes,\n        seconds\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = this.state;\n    const daysRadius = mapNumber(days, 30, 0, 0, 360);\n    const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n    const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n    const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n    if (!seconds) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Countdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-wrapper\",\n        children: [days && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: daysRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 8\n          }, this), days, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 7\n        }, this), hours && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: hoursRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 8\n          }, this), hours, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 7\n        }, this), minutes && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: minutesRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 8\n          }, this), minutes, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }, this), seconds && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-item\",\n          children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n            radius: secondsRadius\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 8\n          }, this), seconds, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"seconds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx"],"names":["React","Moment","moment","Countdown","Component","state","days","undefined","hours","minutes","seconds","componentDidMount","interval","setInterval","timeTillDate","timeFormat","props","then","now","countdown","format","setState","componentWillUnmount","clearInterval","render","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius"],"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","sourcesContent":["// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n\n\n// }\n\n// import React, { useState, useEffect } from \"react\";\n\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n\n\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default TextBox;\n\n// import React from 'react';\n// import Moment from 'react-moment';\n\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\nimport React from 'react';\nimport Moment from 'react-moment';\nimport moment from 'moment'\n\n// export default class TextBox extends React.Component {\n\n//     render() {\n//         const currentDateTime = moment()\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n\n//                 <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n//             </div>\n\n\n\n//         );\n//     }\n// }\n\nclass Countdown extends React.Component {\n\tstate = {\n\t\tdays: undefined,\n\t\thours: undefined,\n\t\tminutes: undefined,\n\t\tseconds: undefined\n\t}\n\t\n\tcomponentDidMount() {\n\t\tthis.interval = setInterval(() => {\n\t\t\tconst { timeTillDate, timeFormat } = this.props;\n\t\t\tconst then = moment(timeTillDate, timeFormat);\n\t\t\tconst now = moment();\n\t\t\tconst countdown = moment(then - now);\n\t\t\tconst days = countdown.format('D');\n\t\t\tconst hours = countdown.format('HH');\n\t\t\tconst minutes = countdown.format('mm');\n\t\t\tconst seconds = countdown.format('ss');\n\n\t\t\tthis.setState({ days, hours, minutes, seconds });\n\t\t}, 1000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif(this.interval) {\n\t\t\tclearInterval(this.interval);\n\t\t}\n\t}\n\t\n\trender() {\n\t\tconst { days, hours, minutes, seconds } = this.state;\n\t\tconst daysRadius = mapNumber(days, 30, 0, 0, 360);\n\t\tconst hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n\t\tconst minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n\t\tconst secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n\t\tif(!seconds) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Countdown</h1>\n\t\t\t\t<div className='countdown-wrapper'>\n\t\t\t\t\t{days && (\n\t\t\t\t\t\t<div className='countdown-item'>\n\t\t\t\t\t\t\t<SVGCircle radius={daysRadius} />\n\t\t\t\t\t\t\t{days} \n\t\t\t\t\t\t\t<span>days</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{hours && (\n\t\t\t\t\t\t<div className='countdown-item'>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<SVGCircle radius={hoursRadius} />\n\t\t\t\t\t\t\t{hours} \n\t\t\t\t\t\t\t<span>hours</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{minutes && (\n\t\t\t\t\t\t<div className='countdown-item'>\n\t\t\t\t\t\t\t<SVGCircle radius={minutesRadius} />\n\t\t\t\t\t\t\t{minutes} \n\t\t\t\t\t\t\t<span>minutes</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{seconds && (\n\t\t\t\t\t\t<div className='countdown-item'>\n\t\t\t\t\t\t\t<SVGCircle radius={secondsRadius} />\n\t\t\t\t\t\t\t{seconds} \n\t\t\t\t\t\t\t<span>seconds</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}