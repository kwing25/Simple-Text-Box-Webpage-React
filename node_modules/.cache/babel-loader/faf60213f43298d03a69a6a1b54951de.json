{"ast":null,"code":"// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n// }\n// import React, { useState, useEffect } from \"react\";\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n// export default TextBox;\n// import React from 'react';\n// import Moment from 'react-moment';\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\n// import React from 'react';\n// import Moment from 'react-moment';\n// import moment from 'moment'\n// export default class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n//     render() {\n//         const currentDateTime = moment()\n//         const { days, hours, minutes, seconds } = this.state;\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n//                 {/* <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n//                 <div>\n//                     <h1>Countdown</h1>\n//                     <div className=\"countdown-wrapper\">\n//                         <div className=\"countdown-item\">\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     </div>\n//                 </div> */}\n//                 <div>\n//                     Dhaka: <Moment unix tz=\"Asia/Dhaka\">\n//                         {currentDateTime}\n//                     </Moment><br />\n//       Los Angeles: <Moment unix tz=\"America/Los_Angeles\">\n//                         {currentDateTime}\n//                     </Moment>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// import { React } from 'react';\n// import moment from 'moment';\n// export class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n//     componentDidMount() {\n//         this.interval = setInterval(() => {\n//             const {\n//                 timeTillDate,\n//                 timeFormat\n//             } = this.props;\n//             const then = moment(timeTillDate, timeFormat);\n//             const now = moment();\n//             const countdown = moment(then - now);\n//             const days = countdown.format('D');\n//             const hours = countdown.format('HH');\n//             const minutes = countdown.format('mm');\n//             const seconds = countdown.format('ss');\n//             this.setState({\n//                 days,\n//                 hours,\n//                 minutes,\n//                 seconds\n//             });\n//         }, 1000);\n//     }\n//     componentWillUnmount() {\n//         if (this.interval) {\n//             clearInterval(this.interval);\n//         }\n//     }\n//     render() {\n//         const {\n//             days,\n//             hours,\n//             minutes,\n//             seconds\n//         } = this.state;\n//         // Mapping the date values to radius values\n//         const daysRadius = mapNumber(days, 30, 0, 0, 360);\n//         const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n//         const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n//         const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n//         if (!seconds) {\n//             return null;\n//         }\n//         return (\n//             <div>\n//                 <h1>Countdown</h1>\n//                 <div className=\"countdown-wrapper\">\n//                     {days && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={daysRadius} />\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                     )}\n//                     {hours && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={hoursRadius} />\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                     )}\n//                     {minutes && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={minutesRadius} />\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                     )}\n//                     {seconds && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={secondsRadius} />\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// const SVGCircle = ({\n//     radius\n// }) => (\n//     <svg className=\"countdown-svg\">\n//         <path\n//             fill=\"none\"\n//             stroke=\"#333\"\n//             stroke-width=\"4\"\n//             d={describeArc(50, 50, 48, 0, radius)}\n//         />\n//     </svg>\n// );\n// // From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n// function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n//     var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n//     return {\n//         x: centerX + radius * Math.cos(angleInRadians),\n//         y: centerY + radius * Math.sin(angleInRadians)\n//     };\n// }\n// function describeArc(x, y, radius, startAngle, endAngle) {\n//     var start = polarToCartesian(x, y, radius, endAngle);\n//     var end = polarToCartesian(x, y, radius, startAngle);\n//     var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n//     var d = [\n//         'M',\n//         start.x,\n//         start.y,\n//         'A',\n//         radius,\n//         radius,\n//         0,\n//         largeArcFlag,\n//         0,\n//         end.x,\n//         end.y\n//     ].join(' ');\n//     return d;\n// }\n// // From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n// function mapNumber(number, in_min, in_max, out_min, out_max) {\n//     return (\n//         ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n//     );\n// }\n//Clock and Date\nfunction startTime() {\n  var today = new Date();\n  var hr = today.getHours();\n  var min = today.getMinutes();\n  var sec = today.getSeconds();\n  ap = hr < 12 ? \"<span>AM</span>\" : \"<span>PM</span>\";\n  hr = hr == 0 ? 12 : hr;\n  hr = hr > 12 ? hr - 12 : hr; //Add a zero in front of numbers<10\n\n  hr = checkTime(hr);\n  min = checkTime(min);\n  sec = checkTime(sec);\n  document.getElementById(\"clock\").innerHTML = hr + \":\" + min + \":\" + sec + \" \" + ap;\n  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  var curWeekDay = days[today.getDay()];\n  var curDay = today.getDate();\n  var curMonth = months[today.getMonth()];\n  var curYear = today.getFullYear();\n  var date = curWeekDay + \", \" + curDay + \" \" + curMonth + \" \" + curYear;\n  document.getElementById(\"date\").innerHTML = date;\n  var time = setTimeout(function () {\n    startTime();\n  }, 500);\n}\n\nfunction checkTime(i) {\n  if (i < 10) {\n    i = \"0\" + i;\n  }\n\n  return i;\n}","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx"],"names":["startTime","today","Date","hr","getHours","min","getMinutes","sec","getSeconds","ap","checkTime","document","getElementById","innerHTML","months","days","curWeekDay","getDay","curDay","getDate","curMonth","getMonth","curYear","getFullYear","date","time","setTimeout","i"],"mappingsqB;AACjB,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,EAAE,GAAGF,KAAK,CAACG,QAAN,EAAT;AACA,MAAIC,GAAG,GAAGJ,KAAK,CAACK,UAAN,EAAV;AACA,MAAIC,GAAG,GAAGN,KAAK,CAACO,UAAN,EAAV;AACAC,EAAAA,EAAE,GAAIN,EAAE,GAAG,EAAN,GAAY,iBAAZ,GAAgC,iBAArC;AACAA,EAAAA,EAAE,GAAIA,EAAE,IAAI,CAAP,GAAY,EAAZ,GAAiBA,EAAtB;AACAA,EAAAA,EAAE,GAAIA,EAAE,GAAG,EAAN,GAAYA,EAAE,GAAG,EAAjB,GAAsBA,EAA3B,CAPiB,CAQjB;;AACAA,EAAAA,EAAE,GAAGO,SAAS,CAACP,EAAD,CAAd;AACAE,EAAAA,GAAG,GAAGK,SAAS,CAACL,GAAD,CAAf;AACAE,EAAAA,GAAG,GAAGG,SAAS,CAACH,GAAD,CAAf;AACAI,EAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,GAA6CV,EAAE,GAAG,GAAL,GAAWE,GAAX,GAAiB,GAAjB,GAAuBE,GAAvB,GAA6B,GAA7B,GAAmCE,EAAhF;AAEA,MAAIK,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAb;AACA,MAAIC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAX;AACA,MAAIC,UAAU,GAAGD,IAAI,CAACd,KAAK,CAACgB,MAAN,EAAD,CAArB;AACA,MAAIC,MAAM,GAAGjB,KAAK,CAACkB,OAAN,EAAb;AACA,MAAIC,QAAQ,GAAGN,MAAM,CAACb,KAAK,CAACoB,QAAN,EAAD,CAArB;AACA,MAAIC,OAAO,GAAGrB,KAAK,CAACsB,WAAN,EAAd;AACA,MAAIC,IAAI,GAAGR,UAAU,GAAG,IAAb,GAAoBE,MAApB,GAA6B,GAA7B,GAAmCE,QAAnC,GAA8C,GAA9C,GAAoDE,OAA/D;AACAX,EAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4CW,IAA5C;AAEA,MAAIC,IAAI,GAAGC,UAAU,CAAC,YAAY;AAC9B1B,IAAAA,SAAS;AACZ,GAFoB,EAElB,GAFkB,CAArB;AAGH;;AAED,SAASU,SAAT,CAAmBiB,CAAnB,EAAsB;AAClB,MAAIA,CAAC,GAAG,EAAR,EAAY;AACRA,IAAAA,CAAC,GAAG,MAAMA,CAAV;AACH;;AACD,SAAOA,CAAP;AACH","sourcesContent":["// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n\n\n// }\n\n// import React, { useState, useEffect } from \"react\";\n\n// const TextBox = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [noteEditing, setNoteEditing] = useState(\"\");\n\n//   useEffect(() => {\n//     const json = JSON.stringify(notes);\n//     localStorage.setItem(\"notes\", json);\n//   }, [notes]);\n\n//   useEffect(() => {\n//     const json = localStorage.getItem(\"notes\");\n//     const savedNotes = JSON.parse(json);\n//     if (savedNotes) {\n//       setNotes(savedNotes);\n//     }\n//   }, []);\n\n//   const addNote = (e) => {\n//     e.preventDefault();\n//     const newNote = {\n//       id: Math.random().toString(36).substr(2, 9),\n//       text: e.target.note.value,\n//     };\n//     setNotes([...notes, newNote]);\n//     e.target.note.value = \"\";\n//   };\n\n//   const deleteNote = (idToDelete) => {\n//     const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n//     setNotes(filteredNotes);\n//   };\n\n//   const submitEdits = (event, idToEdit) => {\n//     event.preventDefault();\n//     const updatedNotes = notes.map((note) => {\n//       if (note.id === idToEdit) {\n//         return {\n//           id: note.id,\n//           text: event.target.note.value,\n//         };\n//       } else {\n//         return note;\n//       }\n//     });\n//     setNotes(updatedNotes);\n//     setNoteEditing(\"\");\n//   };\n\n\n//   return (\n//     <div className=\"textbox\">\n//       <h1>localStorage Demo</h1>\n//       <form onSubmit={addNote}>\n//         <input type=\"text\" name=\"note\" />\n//         <input type=\"Submit\" />\n//       </form>\n//       {notes.map((note) => (\n//         <div key={note.id}>\n//           {note.id !== noteEditing ? (\n//             <div>{note.text}</div>\n//           ) : (\n//               <form onSubmit={(e) => submitEdits(e, note.id)}>\n//                 <textarea name=\"note\" defaultValue={note.text}></textarea>\n//                 <button type=\"Submit\"> Submit Edits</button>\n//               </form>\n//             )}\n//           <button onClick={() => deleteNote(note.id)}>delete</button>\n//           <button onClick={() => setNoteEditing(note.id)}>edit</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default TextBox;\n\n// import React from 'react';\n// import Moment from 'react-moment';\n\n// export default class TextBox extends React.Component {\n//   render() {\n//     const dateToFormat = '1976-04-19T12:59-0500';\n//     return (\n\n//       <Moment>{dateToFormat}</Moment>\n//     );\n//   }\n// }\n// import React from 'react';\n// import Moment from 'react-moment';\n// import moment from 'moment'\n\n// export default class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n//     render() {\n//         const currentDateTime = moment()\n\n//         const { days, hours, minutes, seconds } = this.state;\n\n//         return (\n//             <div>\n//                 <Moment format='MMMM Do YYYY, h:mm:ss a'>{currentDateTime}</Moment>\n\n//                 {/* <div>\n//                     <Moment add={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment add={{ days: 1, hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ hours: 12 }}>{currentDateTime}</Moment> <br />\n//                     <Moment subtract={{ days: 1, hours: 12 }}>{currentDateTime}</Moment>\n//                 </div>\n\n\n//                 <div>\n//                     <h1>Countdown</h1>\n//                     <div className=\"countdown-wrapper\">\n//                         <div className=\"countdown-item\">\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                         <div className=\"countdown-item\">\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     </div>\n//                 </div> */}\n\n\n//                 <div>\n//                     Dhaka: <Moment unix tz=\"Asia/Dhaka\">\n//                         {currentDateTime}\n//                     </Moment><br />\n//       Los Angeles: <Moment unix tz=\"America/Los_Angeles\">\n//                         {currentDateTime}\n//                     </Moment>\n//                 </div>\n\n//             </div>\n\n\n\n//         );\n//     }\n// }\n\n\n// import { React } from 'react';\n// import moment from 'moment';\n// export class TextBox extends React.Component {\n//     state = {\n//         days: undefined,\n//         hours: undefined,\n//         minutes: undefined,\n//         seconds: undefined\n//     };\n\n    \n//     componentDidMount() {\n//         this.interval = setInterval(() => {\n//             const {\n//                 timeTillDate,\n//                 timeFormat\n//             } = this.props;\n//             const then = moment(timeTillDate, timeFormat);\n//             const now = moment();\n//             const countdown = moment(then - now);\n//             const days = countdown.format('D');\n//             const hours = countdown.format('HH');\n//             const minutes = countdown.format('mm');\n//             const seconds = countdown.format('ss');\n//             this.setState({\n//                 days,\n//                 hours,\n//                 minutes,\n//                 seconds\n//             });\n//         }, 1000);\n//     }\n//     componentWillUnmount() {\n//         if (this.interval) {\n//             clearInterval(this.interval);\n//         }\n//     }\n//     render() {\n//         const {\n//             days,\n//             hours,\n//             minutes,\n//             seconds\n//         } = this.state;\n//         // Mapping the date values to radius values\n//         const daysRadius = mapNumber(days, 30, 0, 0, 360);\n//         const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n//         const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n//         const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n//         if (!seconds) {\n//             return null;\n//         }\n//         return (\n//             <div>\n//                 <h1>Countdown</h1>\n//                 <div className=\"countdown-wrapper\">\n//                     {days && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={daysRadius} />\n//                             {days}\n//                             <span>days</span>\n//                         </div>\n//                     )}\n//                     {hours && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={hoursRadius} />\n//                             {hours}\n//                             <span>hours</span>\n//                         </div>\n//                     )}\n//                     {minutes && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={minutesRadius} />\n//                             {minutes}\n//                             <span>minutes</span>\n//                         </div>\n//                     )}\n//                     {seconds && (\n//                         <div className=\"countdown-item\">\n//                             <SVGCircle radius={secondsRadius} />\n//                             {seconds}\n//                             <span>seconds</span>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// const SVGCircle = ({\n//     radius\n// }) => (\n//     <svg className=\"countdown-svg\">\n//         <path\n//             fill=\"none\"\n//             stroke=\"#333\"\n//             stroke-width=\"4\"\n//             d={describeArc(50, 50, 48, 0, radius)}\n//         />\n//     </svg>\n// );\n// // From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n// function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n//     var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n//     return {\n//         x: centerX + radius * Math.cos(angleInRadians),\n//         y: centerY + radius * Math.sin(angleInRadians)\n//     };\n// }\n// function describeArc(x, y, radius, startAngle, endAngle) {\n//     var start = polarToCartesian(x, y, radius, endAngle);\n//     var end = polarToCartesian(x, y, radius, startAngle);\n//     var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n//     var d = [\n//         'M',\n//         start.x,\n//         start.y,\n//         'A',\n//         radius,\n//         radius,\n//         0,\n//         largeArcFlag,\n//         0,\n//         end.x,\n//         end.y\n//     ].join(' ');\n//     return d;\n// }\n// // From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n// function mapNumber(number, in_min, in_max, out_min, out_max) {\n//     return (\n//         ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n//     );\n// }\n\n\n//Clock and Date\nfunction startTime() {\n    var today = new Date();\n    var hr = today.getHours();\n    var min = today.getMinutes();\n    var sec = today.getSeconds();\n    ap = (hr < 12) ? \"<span>AM</span>\" : \"<span>PM</span>\";\n    hr = (hr == 0) ? 12 : hr;\n    hr = (hr > 12) ? hr - 12 : hr;\n    //Add a zero in front of numbers<10\n    hr = checkTime(hr);\n    min = checkTime(min);\n    sec = checkTime(sec);\n    document.getElementById(\"clock\").innerHTML = hr + \":\" + min + \":\" + sec + \" \" + ap;\n\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    var curWeekDay = days[today.getDay()];\n    var curDay = today.getDate();\n    var curMonth = months[today.getMonth()];\n    var curYear = today.getFullYear();\n    var date = curWeekDay + \", \" + curDay + \" \" + curMonth + \" \" + curYear;\n    document.getElementById(\"date\").innerHTML = date;\n\n    var time = setTimeout(function () {\n        startTime()\n    }, 500);\n}\n\nfunction checkTime(i) {\n    if (i < 10) {\n        i = \"0\" + i;\n    }\n    return i;\n}\n"]},"metadata":{},"sourceType":"module"}