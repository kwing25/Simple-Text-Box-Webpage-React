{"ast":null,"code":"var _jsxFileName = \"/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx\",\n    _s = $RefreshSig$();\n\n// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n// }\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextBox = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [noteEditing, setNoteEditing] = useState(\"\");\n  useEffect(() => {\n    const json = JSON.stringify(notes);\n    localStorage.setItem(\"notes\", json);\n  }, [notes]);\n  useEffect(() => {\n    const json = localStorage.getItem(\"notes\");\n    const savedNotes = JSON.parse(json);\n\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n\n  const addNote = e => {\n    e.preventDefault();\n    const newNote = {\n      id: Math.random().toString(36).substr(2, 9),\n      text: e.target.note.value\n    };\n    setNotes([...notes, newNote]);\n    e.target.note.value = \"\";\n  };\n\n  const deleteNote = idToDelete => {\n    const filteredNotes = notes.filter(note => note.id !== idToDelete);\n    setNotes(filteredNotes);\n  };\n\n  const submitEdits = (event, idToEdit) => {\n    event.preventDefault();\n    const updatedNotes = notes.map(note => {\n      if (note.id === idToEdit) {\n        return {\n          id: note.id,\n          text: event.target.note.value\n        };\n      } else {\n        return note;\n      }\n    });\n    setNotes(updatedNotes);\n    setNoteEditing(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"localStorage Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), notes.map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [note.id !== noteEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: note.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => submitEdits(e, note.id),\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"note\",\n          defaultValue: note.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"Submit\",\n          children: \" Submit Edits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNote(note.id),\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNoteEditing(note.id),\n        children: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)]\n    }, note.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TextBox, \"4t3uKzXF535R1H16VDTQ9w+pXh0=\");\n\n_c = TextBox;\nexport default TextBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextBox\");","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/Simple-Text-Box-Webpage-React/src/components/TextBox.jsx"],"names":["React","useState","useEffect","TextBox","notes","setNotes","noteEditing","setNoteEditing","json","JSON","stringify","localStorage","setItem","getItem","savedNotes","parse","addNote","e","preventDefault","newNote","id","Math","random","toString","substr","text","target","note","value","deleteNote","idToDelete","filteredNotes","filter","submitEdits","event","idToEdit","updatedNotes","map"],"mappings":"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","sourcesContent":["// export default function TexBox() {\n//     // Store Title and Text Box input on refresh\n//     function storageAvailable(type) {\n//         var storage;\n//         try {\n//             storage = window[type];\n//             var x = '__storage_test__';\n//             storage.setItem(x, x);\n//             storage.removeItem(x);\n//             return true;\n//         } catch (e) {\n//             return e instanceof DOMException && (\n//                     // everything except Firefox\n//                     e.code === 22 ||\n//                     // Firefox\n//                     e.code === 1014 ||\n//                     // test name field too, because code might not be present\n//                     // everything except Firefox\n//                     e.name === 'QuotaExceededError' ||\n//                     // Firefox\n//                     e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n//                 // acknowledge QuotaExceededError only if there's something already stored\n//                 (storage && storage.length !== 0);\n//         }\n//     }\n\n//     var inputTitle = document.getElementById('title-text-box');\n//     var inputTextBox = document.getElementById('textarea');\n\n//     if (!localStorage.getItem('title-text-box', 'textarea')) {\n//         populateStorage();\n//     } else {\n//         setInput();\n//     }\n\n//     function populateStorage() {\n//         localStorage.setItem('title-text-box', document.getElementById('title-text-box').value);\n//         localStorage.setItem('textarea', document.getElementById('textarea').value);\n//     }\n\n//     function setInput() {\n//         var currentText = localStorage.getItem('title-text-box');\n//         var currentTextArea = localStorage.getItem('textarea');\n\n//         document.getElementById('title-text-box').value = currentText;\n//         document.getElementById('textarea').value = currentTextArea;\n//     }\n\n//     inputTitle.onchange = populateStorage;\n//     inputTextBox.onchange = populateStorage;\n\n\n// }\n\nimport React, { useState, useEffect } from \"react\";\n\nconst TextBox = () => {\n    const [notes, setNotes] = useState([]);\nconst [noteEditing, setNoteEditing] = useState(\"\");\n\nuseEffect(() => {\n  const json = JSON.stringify(notes);\n  localStorage.setItem(\"notes\", json);\n}, [notes]);\n\nuseEffect(() => {\n    const json = localStorage.getItem(\"notes\");\n    const savedNotes = JSON.parse(json);\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n  \nconst addNote = (e) => {\n    e.preventDefault();\n    const newNote = {\n      id: Math.random().toString(36).substr(2, 9),\n      text: e.target.note.value,\n    };\n    setNotes([...notes, newNote]);\n    e.target.note.value = \"\";\n  };\n\n  const deleteNote = (idToDelete) => {\n    const filteredNotes = notes.filter((note) => note.id !== idToDelete);\n    setNotes(filteredNotes);\n  };\n\n  const submitEdits = (event, idToEdit) => {\n    event.preventDefault();\n    const updatedNotes = notes.map((note) => {\n      if (note.id === idToEdit) {\n        return {\n          id: note.id,\n          text: event.target.note.value,\n        };\n      } else {\n        return note;\n      }\n    });\n    setNotes(updatedNotes);\n    setNoteEditing(\"\");\n  };\n  \n\n    return (\n      <div className=\"textbox\">\n        <h1>localStorage Demo</h1>\n        <form onSubmit={addNote}>\n  <input type=\"text\" name=\"note\" />\n  <input type=\"Submit\" />\n</form>\n{notes.map((note) => (\n  <div key={note.id}>\n    {note.id !== noteEditing ? (\n      <div>{note.text}</div>\n      ) : (\n      <form onSubmit={(e) => submitEdits(e, note.id)}>\n        <textarea name=\"note\" defaultValue={note.text}></textarea>\n        <button type=\"Submit\"> Submit Edits</button>\n      </form>\n    )}\n    <button onClick={() => deleteNote(note.id)}>delete</button>\n    <button onClick={() => setNoteEditing(note.id)}>edit</button>\n  </div>\n))}\n      </div>\n    );\n  };\n  \n  export default TextBox;"]},"metadata":{},"sourceType":"module"}